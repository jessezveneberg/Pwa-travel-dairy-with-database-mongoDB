class TravelDiary {
    constructor() {
        this.db = null;
        this.currentPhoto = null;
        this.deferredPrompt = null;
        this.geolocationTimeout = null;
        this.isOnline = navigator.onLine;
        this.syncQueue = [];
        this.init();
    }

    async init() {
        await this.initDB();
        this.initEventListeners();
        await this.checkSync();
        await this.displayEntries();
        this.checkOnlineStatus();
        this.setupServiceWorker();
        this.requestNotificationPermission();
    }

    async initDB() {
        try {
            this.db = await idb.openDB('TravelDiaryDB', 2, {
                upgrade(db, oldVersion) {
                    if (!db.objectStoreNames.contains('entries')) {
                        db.createObjectStore('entries', { keyPath: 'id', autoIncrement: true });
                    }
                    if (!db.objectStoreNames.contains('syncQueue')) {
                        db.createObjectStore('syncQueue', { keyPath: 'id', autoIncrement: true });
                    }
                    if (!db.objectStoreNames.contains('settings')) {
                        db.createObjectStore('settings', { keyPath: 'key' });
                    }
                }
            });
            
            console.log('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', error);
            this.showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
        }
    }

    initEventListeners() {
        // –§–æ—Ä–º–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É
        document.getElementById('entry-form').addEventListener('submit', (e) => this.handleSubmit(e));
        
        // –§–æ—Ç–æ
        document.getElementById('photo').addEventListener('change', (e) => this.handlePhotoUpload(e));
        
        // –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è
        document.getElementById('get-location').addEventListener('click', () => this.getLocation());
        
        // –†—É—á–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó
        document.getElementById('manual-location').addEventListener('click', () => this.saveManualLocation());
        
        // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è PDF
        document.getElementById('generate-pdf').addEventListener('click', () => this.generatePDF());
        
        // –û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        document.getElementById('clear-data').addEventListener('click', () => this.clearAllData());
        
        // –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É PWA
        document.getElementById('clear-cache').addEventListener('click', () => this.clearPWACache());
        
        // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è PWA
        window.addEventListener('beforeinstallprompt', (e) => this.handleInstallPrompt(e));
        document.getElementById('install-btn').addEventListener('click', () => this.installApp());
        
        // –û–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å
        window.addEventListener('online', () => this.handleOnlineStatus());
        window.addEventListener('offline', () => this.handleOfflineStatus());
    }

    async handleSubmit(e) {
        e.preventDefault();
        
        const title = document.getElementById('title').value.trim();
        const description = document.getElementById('description').value.trim();
        const location = document.getElementById('location').value.trim();

        if (!title) {
            this.showToast('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ–¥–æ—Ä–æ–∂—ñ');
            return;
        }

        const entry = {
            title,
            description,
            location,
            photo: this.currentPhoto,
            date: new Date().toLocaleString('uk-UA'),
            timestamp: Date.now(),
            synced: false
        };

        try {
            // –°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —è–∫—â–æ –æ–Ω–ª–∞–π–Ω
            if (this.isOnline) {
                try {
                    const savedEntry = await this.saveToServer(entry);
                    if (savedEntry && savedEntry._id) {
                        entry._id = savedEntry._id;
                        entry.synced = true;
                        this.showToast('‚úÖ –ó–∞–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ —Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ!');
                    }
                } catch (serverError) {
                    console.log('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ:', serverError);
                    this.showToast('üì¥ –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º. –ó–∞–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ.');
                }
            } else {
                this.showToast('üì¥ –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º. –ó–∞–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ.');
            }

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ –≤ –±—É–¥—å-—è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É
            await this.saveToIndexedDB(entry);
            
            this.resetForm();
            await this.displayEntries();
            
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', error);
            this.showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É');
        }
    }

    async saveToServer(entry) {
        const response = await fetch('/api/entries', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                title: entry.title,
                description: entry.description,
                location: entry.location,
                photo: entry.photo,
                date: entry.date
            })
        });

        if (!response.ok) {
            throw new Error('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + response.status);
        }

        return await response.json();
    }

    async saveToIndexedDB(entry) {
        const tx = this.db.transaction('entries', 'readwrite');
        const storedEntry = await tx.store.add(entry);
        await tx.done;

        // –î–æ–¥–∞—î–º–æ –≤ —á–µ—Ä–≥—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó, —è–∫—â–æ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ
        if (!entry.synced) {
            const syncTx = this.db.transaction('syncQueue', 'readwrite');
            await syncTx.store.add({
                type: 'save-entry',
                data: entry,
                timestamp: Date.now()
            });
            await syncTx.done;
        }

        return storedEntry;
    }

    handlePhotoUpload(e) {
        const file = e.target.files[0];
        if (file && file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = (event) => {
                // –°—Ç–∏—Å–Ω–µ–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É
                this.compressImage(event.target.result, 800, 600)
                    .then(compressedPhoto => {
                        this.currentPhoto = compressedPhoto;
                        document.getElementById('photo-preview').innerHTML = `
                            <img src="${this.currentPhoto}" alt="–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥">
                        `;
                    })
                    .catch(error => {
                        console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è —Ñ–æ—Ç–æ:', error);
                        this.currentPhoto = event.target.result;
                        document.getElementById('photo-preview').innerHTML = `
                            <img src="${this.currentPhoto}" alt="–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥">
                        `;
                    });
            };
            reader.readAsDataURL(file);
        }
    }

    compressImage(src, maxWidth, maxHeight) {
        return new Promise((resolve, reject) => {
            const img = new Image();
            img.src = src;
            
            img.onload = () => {
                const canvas = document.createElement('canvas');
                let width = img.width;
                let height = img.height;

                if (width > height) {
                    if (width > maxWidth) {
                        height = Math.round((height * maxWidth) / width);
                        width = maxWidth;
                    }
                } else {
                    if (height > maxHeight) {
                        width = Math.round((width * maxHeight) / height);
                        height = maxHeight;
                    }
                }

                canvas.width = width;
                canvas.height = height;

                const ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0, width, height);

                resolve(canvas.toDataURL('image/jpeg', 0.7));
            };

            img.onerror = reject;
        });
    }

    async getLocation() {
        if (!navigator.geolocation) {
            this.showToast('–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
            this.enableManualLocation();
            return;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ HTTPS –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
        if (window.location.protocol !== 'https:' && window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
            this.showToast('‚ö†Ô∏è –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –Ω–∞ HTTPS –∞–±–æ localhost');
            this.enableManualLocation();
            return;
        }

        // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ç–∞–π–º–∞—É—Ç—É
        if (this.geolocationTimeout) {
            clearTimeout(this.geolocationTimeout);
        }

        const locationBtn = document.getElementById('get-location');
        const originalText = locationBtn.textContent;
        
        locationBtn.textContent = '‚è≥ –û—Ç—Ä–∏–º–∞–Ω–Ω—è...';
        locationBtn.disabled = true;

        this.showToast('üåç –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º—ñ—Å—Ü—è —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è...');

        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
        this.geolocationTimeout = setTimeout(() => {
            this.showToast('‚è∞ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –≤–∏–π—à–æ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ü–µ –≤—Ä—É—á–Ω—É.');
            locationBtn.textContent = originalText;
            locationBtn.disabled = false;
            this.enableManualLocation();
        }, 15000);

        try {
            const position = await new Promise((resolve, reject) => {
                navigator.geolocation.getCurrentPosition(
                    resolve,
                    reject,
                    {
                        enableHighAccuracy: false,
                        timeout: 10000,
                        maximumAge: 5 * 60 * 1000
                    }
                );
            });

            clearTimeout(this.geolocationTimeout);

            const { latitude, longitude } = position.coords;
            
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —è–∫ fallback
            document.getElementById('location').value = `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: ${latitude.toFixed(6)}, ${longitude.toFixed(6)}`;
            
            // –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å—É (–Ω–µ–±–ª–æ–∫—É—é—á–∞)
            try {
                const address = await this.getAddressFromCoords(latitude, longitude);
                if (address && !address.includes('–ü–æ–º–∏–ª–∫–∞')) {
                    document.getElementById('location').value = address;
                }
            } catch (addressError) {
                console.log('–ê–¥—Ä–µ—Å—É –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏');
            }

            this.showToast('‚úÖ –ú—ñ—Å—Ü–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ!');
            
        } catch (error) {
            clearTimeout(this.geolocationTimeout);
            console.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó:', error);
            
            let errorMessage = '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –º—ñ—Å—Ü–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è';
            
            if (error.code === error.PERMISSION_DENIED) {
                errorMessage = '‚ùå –î–æ—Å—Ç—É–ø –¥–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –î–æ–∑–≤–æ–ª—å—Ç–µ –¥–æ—Å—Ç—É–ø —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –±—Ä–∞—É–∑–µ—Ä–∞.';
            } else if (error.code === error.POSITION_UNAVAILABLE) {
                errorMessage = '‚ùå –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º—ñ—Å—Ü–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
            } else if (error.code === error.TIMEOUT) {
                errorMessage = '‚è∞ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–π—à–æ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ü–µ –≤—Ä—É—á–Ω—É.';
            }
            
            this.showToast(errorMessage);
            this.enableManualLocation();
        } finally {
            locationBtn.textContent = 'üìç –û—Ç—Ä–∏–º–∞—Ç–∏ –º–æ—î –º—ñ—Å—Ü–µ';
            locationBtn.disabled = false;
        }
    }

    enableManualLocation() {
        const locationInput = document.getElementById('location');
        locationInput.readOnly = false;
        locationInput.placeholder = '–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ü–µ –≤—Ä—É—á–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "–ö–∞—Ä–ø–∞—Ç–∏, –≥–æ—Ä–∞ –ì–æ–≤–µ—Äla")';
        document.getElementById('manual-location').classList.remove('hidden');
        this.showToast('üí° –ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –º—ñ—Å—Ü–µ –≤—Ä—É—á–Ω—É');
    }

    saveManualLocation() {
        const locationInput = document.getElementById('location');
        if (locationInput.value.trim()) {
            locationInput.readOnly = true;
            document.getElementById('manual-location').classList.add('hidden');
            this.showToast('‚úÖ –ú—ñ—Å—Ü–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
        } else {
            this.showToast('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ü–µ');
        }
    }

    async getAddressFromCoords(lat, lng) {
        try {
            const response = await fetch(
                `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&zoom=16&addressdetails=1`,
                {
                    headers: {
                        'Accept-Language': 'uk,en-US;q=0.7,en;q=0.3'
                    },
                    signal: AbortSignal.timeout(5000)
                }
            );
            
            if (!response.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏');
            
            const data = await response.json();
            return data.display_name || `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: ${lat.toFixed(6)}, ${lng.toFixed(6)}`;
        } catch (error) {
            console.log('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å—É:', error);
            return `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: ${lat.toFixed(6)}, ${lng.toFixed(6)}`;
        }
    }

    async loadEntries() {
        try {
            // –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞
            if (this.isOnline) {
                try {
                    const response = await fetch('/api/entries');
                    if (response.ok) {
                        const serverEntries = await response.json();
                        
                        // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—É –±–∞–∑—É
                        const tx = this.db.transaction('entries', 'readwrite');
                        for (const entry of serverEntries) {
                            await tx.store.put({ ...entry, synced: true });
                        }
                        await tx.done;
                        
                        return serverEntries;
                    }
                } catch (serverError) {
                    console.log('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–∞:', serverError);
                }
            }
            
            // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ –ª–æ–∫–∞–ª—å–Ω–æ—ó –±–∞–∑–∏
            const tx = this.db.transaction('entries', 'readonly');
            return await tx.store.getAll();
            
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤:', error);
            return [];
        }
    }

    async checkSync() {
        if (this.isOnline) {
            try {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ—Ä–≥—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
                const tx = this.db.transaction('syncQueue', 'readonly');
                const queue = await tx.store.getAll();
                await tx.done;

                if (queue.length > 0) {
                    this.showToast('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö...');
                    await this.syncData(queue);
                }
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
            }
        }
    }

    async syncData(queue) {
        try {
            const entriesToSync = queue.map(item => item.data);
            
            const response = await fetch('/api/sync', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ entries: entriesToSync })
            });

            if (response.ok) {
                // –û—á–∏—â–∞—î–º–æ —á–µ—Ä–≥—É
                const tx = this.db.transaction('syncQueue', 'readwrite');
                await tx.store.clear();
                await tx.done;
                
                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –≤ –∑–∞–ø–∏—Å–∞—Ö
                const entriesTx = this.db.transaction('entries', 'readwrite');
                const entries = await entriesTx.store.getAll();
                
                for (const entry of entries) {
                    if (!entry.synced) {
                        entry.synced = true;
                        await entriesTx.store.put(entry);
                    }
                }
                await entriesTx.done;
                
                this.showToast('‚úÖ –î–∞–Ω—ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ!');
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
            this.showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
        }
    }

    async displayEntries() {
        const container = document.getElementById('entries-container');
        
        try {
            const entries = await this.loadEntries();
            
            if (entries.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <h3>üìù –©–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤</h3>
                        <p>–î–æ–¥–∞–π—Ç–µ –≤–∞—à –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å –ø—Ä–æ –ø–æ–¥–æ—Ä–æ–∂!</p>
                    </div>
                `;
                return;
            }

            // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é (–Ω–æ–≤—ñ—à—ñ –ø–µ—Ä—à–∏–º–∏)
            entries.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

            container.innerHTML = entries.map(entry => `
                <div class="entry-card">
                    <h3>${this.escapeHtml(entry.title)}</h3>
                    <div class="date">üìÖ ${entry.date} ${!entry.synced ? 'üîÑ' : ''}</div>
                    ${entry.description ? `<div class="description">${this.escapeHtml(entry.description)}</div>` : ''}
                    ${entry.location ? `<div class="location">üìç ${this.escapeHtml(entry.location)}</div>` : ''}
                    ${entry.photo ? `<img src="${entry.photo}" class="entry-image" alt="${this.escapeHtml(entry.title)}">` : ''}
                    ${!entry.synced ? '<div class="sync-status">‚è≥ –û—á—ñ–∫—É—î —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó</div>' : ''}
                </div>
            `).join('');
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤:', error);
            container.innerHTML = '<p class="error">‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤</p>';
        }
    }

    resetForm() {
        document.getElementById('entry-form').reset();
        document.getElementById('photo-preview').innerHTML = '';
        this.currentPhoto = null;
        document.getElementById('location').readOnly = true;
        document.getElementById('location').placeholder = '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º—ñ—Å—Ü—è';
        document.getElementById('manual-location').classList.add('hidden');
    }

    async generatePDF() {
        try {
            const entries = await this.loadEntries();
            
            if (entries.length === 0) {
                this.showToast('üìù –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É');
                return;
            }

            this.showToast('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è PDF...');

            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            doc.setFontSize(20);
            doc.setTextColor(46, 125, 50);
            doc.text('–ó–≤—ñ—Ç –ø—Ä–æ –ø–æ–¥–æ—Ä–æ–∂—ñ', 105, 20, { align: 'center' });
            
            doc.setFontSize(12);
            doc.setTextColor(100, 100, 100);
            doc.text(`–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleDateString('uk-UA')}`, 105, 30, { align: 'center' });
            
            let y = 40;
            
            entries.forEach((entry, index) => {
                if (y > 250) {
                    doc.addPage();
                    y = 20;
                }
                
                doc.setFontSize(16);
                doc.setTextColor(0, 0, 0);
                doc.text(entry.title, 20, y);
                y += 10;
                
                doc.setFontSize(10);
                doc.setTextColor(100, 100, 100);
                doc.text(entry.date, 20, y);
                y += 8;
                
                if (entry.description) {
                    doc.setFontSize(12);
                    doc.setTextColor(0, 0, 0);
                    const splitText = doc.splitTextToSize(entry.description, 170);
                    doc.text(splitText, 20, y);
                    y += splitText.length * 6;
                }
                
                if (entry.location) {
                    doc.setFontSize(10);
                    doc.setTextColor(76, 175, 80);
                    doc.text(`üìç ${entry.location}`, 20, y);
                    y += 8;
                }
                
                y += 15;
                
                if (index < entries.length - 1) {
                    doc.setDrawColor(200, 200, 200);
                    doc.line(20, y, 190, y);
                    y += 10;
                }
            });
            
            doc.save(`–∑–≤—ñ—Ç_–ø–æ–¥–æ—Ä–æ–∂—ñ_${new Date().toISOString().split('T')[0]}.pdf`);
            this.showToast('‚úÖ PDF —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!');
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF:', error);
            this.showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF');
        }
    }

    async clearAllData() {
        if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏? –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏.')) {
            return;
        }

        try {
            const tx = this.db.transaction('entries', 'readwrite');
            await tx.store.clear();
            await tx.done;
            
            const syncTx = this.db.transaction('syncQueue', 'readwrite');
            await syncTx.store.clear();
            await syncTx.done;
            
            this.showToast('‚úÖ –í—Å—ñ –¥–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ');
            await this.displayEntries();
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
            this.showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö');
        }
    }

    async clearPWACache() {
        if (!confirm('–û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à PWA? –¶–µ –æ–Ω–æ–≤–∏—Ç—å –¥–∏–∑–∞–π–Ω –¥–æ–¥–∞—Ç–∫–∞.')) {
            return;
        }

        try {
            if ('serviceWorker' in navigator) {
                const registrations = await navigator.serviceWorker.getRegistrations();
                for (let registration of registrations) {
                    await registration.unregister();
                }
            }
            
            if ('caches' in window) {
                const cacheNames = await caches.keys();
                for (let cacheName of cacheNames) {
                    await caches.delete(cacheName);
                }
            }
            
            // –û—á–∏—â–∞—î–º–æ IndexedDB
            await this.db.close();
            indexedDB.deleteDatabase('TravelDiaryDB');
            
            this.showToast('‚úÖ –ö–µ—à PWA –æ—á–∏—â–µ–Ω–æ! –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É.');
            setTimeout(() => {
                window.location.reload();
            }, 2000);
            
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É:', error);
            this.showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –∫–µ—à—É');
        }
    }

    handleInstallPrompt(e) {
        e.preventDefault();
        this.deferredPrompt = e;
        document.getElementById('install-btn').classList.remove('hidden');
    }

    async installApp() {
        if (!this.deferredPrompt) {
            this.showToast('–î–æ–¥–∞—Ç–æ–∫ –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è');
            return;
        }
        
        this.deferredPrompt.prompt();
        
        const { outcome } = await this.deferredPrompt.userChoice;
        
        if (outcome === 'accepted') {
            this.showToast('‚úÖ –î–æ–¥–∞—Ç–æ–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
        } else {
            this.showToast('‚ùå –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
        }
        
        this.deferredPrompt = null;
        document.getElementById('install-btn').classList.add('hidden');
    }

    checkOnlineStatus() {
        this.isOnline = navigator.onLine;
        
        const statusElement = document.createElement('div');
        statusElement.className = `status ${this.isOnline ? 'online' : 'offline'}`;
        statusElement.textContent = this.isOnline ? 'üåê –û–Ω–ª–∞–π–Ω' : 'üì¥ –û—Ñ–ª–∞–π–Ω';
        document.body.appendChild(statusElement);

        setTimeout(() => {
            if (document.body.contains(statusElement)) {
                document.body.removeChild(statusElement);
            }
        }, 3000);

        if (this.isOnline) {
            this.handleOnlineStatus();
        } else {
            this.handleOfflineStatus();
        }
    }

    handleOnlineStatus() {
        this.showToast('üåê –í–∏ –æ–Ω–ª–∞–π–Ω. –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö...', 2000);
        this.scheduleNotifications();
        this.checkSync();
    }

    handleOfflineStatus() {
        this.showToast('üì¥ –í–∏ –æ—Ñ–ª–∞–π–Ω. –î–∞–Ω—ñ –±—É–¥—É—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω—ñ –ø—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ.', 3000);
    }

    scheduleNotifications() {
        // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ñ–æ—Ç–æ –¥–Ω—è
        setTimeout(() => {
            this.showBrowserNotification('–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Ñ–æ—Ç–æ –¥–Ω—è! üì∏');
        }, 30000); // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∏–Ω—É–ª–∏—Ö –ø–æ–¥–æ—Ä–æ–∂–µ–π
        this.checkPastTrips();
    }

    async checkPastTrips() {
        const entries = await this.loadEntries();
        if (entries.length > 0) {
            const firstEntry = entries[0];
            const entryDate = new Date(firstEntry.timestamp);
            const now = new Date();
            
            const diffTime = Math.abs(now - entryDate);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            
            if (diffDays === 365) {
                this.showBrowserNotification(`üéÇ –†—ñ–∫ —Ç–æ–º—É –≤–∏ –±—É–ª–∏ –≤ –ø–æ–¥–æ—Ä–æ–∂—ñ: "${firstEntry.title}"`);
            } else if (diffDays === 30) {
                this.showBrowserNotification(`üìÖ –ú—ñ—Å—è—Ü—å —Ç–æ–º—É –≤–∏ –±—É–ª–∏ –≤ –ø–æ–¥–æ—Ä–æ–∂—ñ: "${firstEntry.title}"`);
            }
        }
    }

    showBrowserNotification(message) {
        if ('Notification' in window && Notification.permission === 'granted') {
            new Notification('–©–æ–¥–µ–Ω–Ω–∏–∫ –ø–æ–¥–æ—Ä–æ–∂–µ–π', {
                body: message,
                icon: 'icons/icon-192.png',
                badge: 'icons/icon-192.png'
            });
        }
    }

    async requestNotificationPermission() {
        if ('Notification' in window && Notification.permission === 'default') {
            try {
                const permission = await Notification.requestPermission();
                console.log('–î–æ–∑–≤—ñ–ª –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', permission);
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ–∑–≤–æ–ª—É:', error);
            }
        }
    }

    showToast(message, duration = 3000) {
        const toast = document.getElementById('toast');
        toast.textContent = message;
        toast.classList.remove('hidden');
        
        setTimeout(() => {
            toast.classList.add('hidden');
        }, duration);
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    async setupServiceWorker() {
        if ('serviceWorker' in navigator) {
            try {
                const registration = await navigator.serviceWorker.register('/service-worker.js?v=4');
                console.log('Service Worker –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ:', registration);
                
                // –°–ª—É—Ö–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                registration.addEventListener('updatefound', () => {
                    const newWorker = registration.installing;
                    newWorker.addEventListener('statechange', () => {
                        if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                            this.showToast('üîÑ –î–æ—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è! –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É.');
                        }
                    });
                });
                
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó Service Worker:', error);
            }
        }
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É
document.addEventListener('DOMContentLoaded', () => {
    window.travelDiaryApp = new TravelDiary();
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
window.updatePWA = function() {
    if (window.travelDiaryApp) {
        window.travelDiaryApp.clearPWACache();
    }
};

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
window.addEventListener('error', (event) => {
    console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', event.error);
});

window.addEventListener('unhandledrejection', (event) => {
    console.error('–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø—Ä–æ–º—ñ—Å-–ø–æ–º–∏–ª–∫–∞:', event.reason);
});